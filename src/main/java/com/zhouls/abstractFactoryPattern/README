参考:https://www.cnblogs.com/yssjun/p/11102162.html

工厂顾名思义就是创建产品，
    根据产品是具体产品还是具体工厂可分为简单工厂模式和工厂方法模式，
    根据工厂的抽象程度可分为工厂方法模式和抽象工厂模式。
    该模式用于封装和管理对象的创建，是一种创建型模式。

simpleFactoryPattern:
其中，Phone.java是抽象产品类，它⼀般是具体产品继承的⽗类或者实现的接⼝
     MiPhone.java和IPhone.java是具体产品类，⼚类所创建的对象就是此⻆⾊的实例
     PhoneFactory.java是⼯⼚类，简单工厂模式的核⼼，含有⼀定的商业逻辑和判断逻辑，⽤来创建产品
     App.java是客户提需求


factoryMethodPattern:
其中，Phone.java是抽象产品类，它⼀般是具体产品继承的⽗类或者实现的接⼝
     MiPhone.java和IPhone.java是具体产品类，⼚类所创建的对象就是此⻆⾊的实例
     /**
        工厂方法模式也就是定义一个抽象工厂AbstractFactory.java，其定义了产品的生产接口，但不负责具体的产品，
        将生产任务交给不同的派生类具体工厂XiaoMiFactory.java、 AppleFactory.java。
        这样不用通过指定类型来创建对象了。
     **/
     由 PhoneFactory.java 变为 AbstractFactory.java、  XiaoMiFactory.java、  AppleFactory.java
     App.java是客户提需求




abstractFactoryPattern:

其中，Phone.java和PC.java是抽象产品类，它⼀般是具体产品继承的⽗类或者实现的接⼝
     MiPhone.java、IPhone.java、MAC.java、MiPC.java是具体产品类，⼚类所创建的对象就是此⻆⾊的实例

     /**
     上面两种模式不管工厂怎么拆分抽象，都只是针对一类产品Phone（AbstractProduct），如果要生成另一种产品PC，应该怎么表示呢？
         最简单的方式是把2中介绍的工厂方法模式完全复制一份，不过这次生产的是PC。
         但同时也就意味着我们要完全复制和修改Phone生产管理的所有代码，显然这是一个笨办法，并不利于扩展和维护。

         抽象工厂模式通过在AbstarctFactory中增加创建产品的接口，并在具体子工厂中实现新加产品的创建，当然前提是子工厂支持生产该产品。
         否则继承的这个接口可以什么也不干。
     **/
     AbstractFactory.java、  XiaoMiFactory.java、  AppleFactory.java
     App.java是客户提需求


